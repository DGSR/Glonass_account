import csv
import ast
import json
import time
from copy import deepcopy
from pathlib import Path

from api.api_class import GSApi
from api.sensor_schema import SensorSchema


def read_csv(filename, command=False):
    """
    read csv template generated by GlonassSoft
    start from sensors
    finish on templates
    validate data with Sensor schema
    :param filename:
    :return: list of dicts (sensors)
    """
    print(filename)
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        raw_csv = []
        for rows in reader:
            if rows == ['sensors']:
                continue
            if rows == ['templates']:
                break
            print(rows)
            raw_csv.append(rows)

        res = []

        for rows in raw_csv[1:]:
            res.append({index: value for index, value in zip(raw_csv[0], rows)})
        data = []
        for i in res:
            temp = deepcopy(i)
            schema = SensorSchema()
            if not command:
                temp['custom'] = json.loads(temp['custom'])
                temp['gradesTables'] = json.loads(temp['gradesTables'])
                # for j in temp['gradesTables']:
                #     j['updateUserName'] = 'trajectoryspb'

            temp = schema.load(temp)
            t = str(temp['normalState'])
            temp['normalState'] = t[0].lower() + t[1:]
            temp['id'] = None
            data.append(temp)
        return data


def read_json(filename):
    with open(filename, 'r') as json_file:
        data = json.load(json_file)
    return data


def add_sensors_to_object_old(name):  # ign, dut, block):
    base_path = '/home/dev/Рабочий стол/Yandex.Disk/Загрузки/GLONASSSoft/Телтоника/'
    out_path = str(Path(__file__).resolve().parent.parent) + '/JSONTemplates/'
    base_name = 'Телтоника '
    base_extension = '.csv'
    sensors = []
    commands = []

    filename = base_path + base_name + name + base_extension
    sensors.extend(read_csv(filename))

    with open(base_path + base_name + name + '.json', 'w') as f:
        json.dump(sensors, f, ensure_ascii=False)


def add_sensors_to_object(owner_id: str, vehicle_id: str, ign: str = '',
                          dut: str = 'Без ДУТ', block: str = 'Без блокировки',
                          templates_path: str = '/templates'):
    """
    Create sensors in GlonassSoft vehicles using names of ign, dut and block
    Some sensors will be added with commands (hardcoded)
    By default, function will not produce anything

    :param owner_id: str Client's id
    :param vehicle_id: str Vehicle's id
    :param ign: str Ignition sensor
    :param dut: str ДУТ or fuel level sensor
    :param block: str block sensor
    :param templates_path: path to JSON templates of sensors
    :return: None
    """
    base_path = str(Path(__file__).resolve().parent) + templates_path
    base_name = base_path + 'Телтоника '
    extension = '.json'
    sensors = []
    commands = []
    commands_fields = {
        'OwnerGuid': owner_id,
        'VehicleGuid': vehicle_id
    }
    # Check if there is any sensor to add
    if ign == '' and dut == 'Без ДУТ' and block == 'Без блокировки':
        print("No sensors to add")
        return

    # Check each sensor and add them to the list
    if ign != '':
        ign_filename = base_name + 'зажигание ' + ign + extension
        sensors.extend(read_json(ign_filename))

    if dut != 'Без ДУТ':
        dut_filename = base_name + dut + extension
        sensors.extend(read_json(dut_filename))

        if dut == 'CAN':
            command_filename = base_name + 'команды CAN' + extension
            commands.extend(read_json(command_filename))

    if block != 'Без блокировки':
        block_filename = base_name + block + extension
        sensors.extend(read_json(block_filename))

        command_filename = base_name + 'команды на блокировку' + extension
        commands.extend(read_json(command_filename))
        commands = [{**i, **commands_fields} for i in commands]

    # Send list of sensors to api
    api = GSApi()
    api.add_sensor(vehicle_id, sensors)

    # Send list of commands, if there are any
    if len(commands) > 0:
        time.sleep(1)
        api.edit_commands(commands)



