import csv
import ast
import json
import os
import time
from copy import deepcopy
from pathlib import Path

from api.api_class import GSApi
from api.sensor_schema import SensorSchema


def read_csv(filename, command=False):
    """
    read csv template generated by GlonassSoft
    start from sensors
    finish on templates
    validate data with Sensor schema
    :param filename:
    :return: list of dicts (sensors)
    """
    print(filename)
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        raw_csv = []
        for rows in reader:
            if rows == ['sensors']:
                continue
            if rows == ['templates']:
                break
            print(rows)
            raw_csv.append(rows)

        res = []

        for rows in raw_csv[1:]:
            res.append({index: value for index, value in zip(raw_csv[0], rows)})
        data = []
        for i in res:
            temp = deepcopy(i)
            schema = SensorSchema()
            if not command:
                temp['custom'] = json.loads(temp['custom'])
                temp['gradesTables'] = json.loads(temp['gradesTables'])
                # for j in temp['gradesTables']:
                #     j['updateUserName'] = 'trajectoryspb'

            temp = schema.load(temp)
            t = str(temp['normalState'])
            temp['normalState'] = t[0].lower() + t[1:]
            temp['id'] = None
            data.append(temp)
        return data


def read_json(filename):
    with open(filename, 'r') as json_file:
        data = json.load(json_file)
    return data


def add_sensors_to_object_old(name):  # ign, dut, block):
    base_path = '/home/dev/Рабочий стол/Yandex.Disk/Загрузки/GLONASSSoft/Телтоника/'
    out_path = str(Path(__file__).resolve().parent.parent) + '/JSONTemplates/'
    base_name = 'Телтоника '
    base_extension = '.csv'
    sensors = []
    commands = []

    filename = base_path + base_name + name + base_extension
    sensors.extend(read_csv(filename))

    with open(base_path + base_name + name + '.json', 'w') as f:
        json.dump(sensors, f, ensure_ascii=False)


def create_sensors_commands(owner_id: str, vehicle_id: str, task_id: str, **kwargs):
    """
    Create two lists: sensors and commands using names in kwargs.
    By default, function will not produce anything
    kwargs should have field with key hwtype and value <brand name> of sensor

    :param owner_id: str Client's id
    :param vehicle_id: str Vehicle's id
    :param templates_path: relative path to JSON templates of sensors
    :param kwargs: dict of sensors to create, key = type of sensor, value = name
    :return: None
    """
    if kwargs == {}:
        return None, None
    base_path = '/home/projects/squidward/GlonassSoft/templates/'
    # base_path = str(Path(__file__).resolve().parent.joinpath(templates_path))
    base_name = base_path + kwargs.get('hwtype', '') + ' '
    extension = '.json'
    sensors = []
    commands = []
    commands_fields = {
        'OwnerGuid': owner_id,
        'VehicleGuid': vehicle_id
    }
    # creator.info(kwargs)

    for key, value in kwargs.items():
        if key == 'hwtype' or value == '':
            continue
        filename = base_name + value + extension
        if os.path.exists(filename):
            template_data = read_json(filename)
            for i in template_data:
                i['vehicleId'] = vehicle_id
            sensors.extend(template_data)
            command_filename = base_name + value + ' команды' + extension
            if os.path.exists(command_filename):
                commands.extend(read_json(command_filename))
        else:
            # better file name for prod
            error_filename = '/'.join(filename.split('/')[::-1][:2][::-1])
            text_error = f"Sensor template doesnt exist: {error_filename}"
            # pyrus_notify(task_id, text_error)

    if len(commands) > 0:
        commands = [{**i, **commands_fields} for i in commands]
    return sensors, commands
